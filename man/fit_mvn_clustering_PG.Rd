% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_mvn_clustering_PG.R
\name{fit_mvn_clustering_PG}
\alias{fit_mvn_clustering_PG}
\title{Multivariate normal mixture model clustering - PG multinom regression}
\usage{
fit_mvn_clustering_PG(Y, W, K, nsim = 2000, burn = 1000, z_init = NULL)
}
\arguments{
\item{Y}{An n x g matrix of gene expression values. n is the number of cell spots and g is the number of features.}

\item{W}{An n x v matrix of covariates to predict cluster membership. Should include an intercept (i.e., first column is 1)}

\item{K}{The number of mixture components to fit.}

\item{nsim}{Number of total MCMC iterations to run.}

\item{burn}{Number of MCMC iterations to discard as burn in. The number of saved samples is nsim - burn.}

\item{z_init}{Optional initialized allocation vector. Randomly initialized if NULL.}
}
\value{
a list of posterior samples
}
\description{
Implement Gibbs sampling for MVN model with no spatial random effects. Includes fixed effects multinomial regression on cluster indicators using Polya-Gamma data augmentation.
}
\examples{
\dontrun{
# parameters
n <- 1000 # number of observations
g <- 3 # number of features
K <- 3 # number of clusters (mixture components)
pi <- rep(1/K,K) # cluster membership probability
z <- sample(1:K, size = n, replace = TRUE, prob = pi) # cluster indicators
z <- remap_canonical2(z)

# multinomial clustering model
w1 <- rbinom(n,1,0.5) # binary predictor
W <- cbind(1,w1) # design matrix
v <- ncol(W) # number of multinomial predictors
Delta <- matrix(truncnorm::rtruncnorm(n = v*(K-1),
                                      a = -1, 
                                      b = 1,
                                      mean = 0),
                nrow = v,
                ncol = K-1) # true multinomial regression coefficients
Eta <- W \%*\% Delta # true eta term for each observation
U <- matrix(0,nrow = n,ncol = K) # make empty U matrix
U[,1] <- QRM::rGumbel(n, mu = 0, sigma = 1)
for(i in 2:K) # populate U matrix with gumbel values
{
  U[,i] <- QRM::rGumbel(n, mu = Eta[,i-1], sigma = 1)
}
c_true <- c(apply(U,1,which.max))
pi_true <- table(c_true)/n
z <- c_true

# Cluster Specific Parameters
# cluster specific means
Mu <- list(
  Mu1 = rnorm(g,-5,1),
  Mu2 = rnorm(g,0,1),
  Mu3 = rnorm(g,5,1)
)
# cluster specific variance-covariance
S <- matrix(1,nrow = g,ncol = g) # covariance matrix
diag(S) <- 1.5
Sig <- list(
  Sig1 = S,
  Sig2 = S, 
  Sig3 = S
)

Y <- matrix(0, nrow = n, ncol = g)
for(i in 1:n)
{
  Y[i,] <- mvtnorm::rmvnorm(1,mean = Mu[[z[i]]],sigma = Sig[[z[i]]])
}

# fit model
fit1 <- fit_mvn_clustering_PG(Y,W,3,10,0)}
}
